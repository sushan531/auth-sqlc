// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package generated

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

type OperationType string

const (
	OperationTypeRead   OperationType = "read"
	OperationTypeWrite  OperationType = "write"
	OperationTypeUpdate OperationType = "update"
	OperationTypeDelete OperationType = "delete"
	OperationTypeLogin  OperationType = "login"
)

func (e *OperationType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OperationType(s)
	case string:
		*e = OperationType(s)
	default:
		return fmt.Errorf("unsupported scan type for OperationType: %T", src)
	}
	return nil
}

type NullOperationType struct {
	OperationType OperationType `json:"operation_type"`
	Valid         bool          `json:"valid"` // Valid is true if OperationType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOperationType) Scan(value interface{}) error {
	if value == nil {
		ns.OperationType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OperationType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOperationType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OperationType), nil
}

type Activity struct {
	ID             uuid.UUID     `json:"id"`
	Identity       string        `json:"identity"`
	Operation      OperationType `json:"operation"`
	Resource       []string      `json:"resource"`
	OldValue       []string      `json:"old_value"`
	NewValue       []string      `json:"new_value"`
	Status         bool          `json:"status"`
	Time           time.Time     `json:"time"`
	OrganizationID uuid.UUID     `json:"organization_id"`
}

type Auth struct {
	ID            uuid.UUID      `json:"id"`
	UserEmail     string         `json:"user_email"`
	Password      string         `json:"password"`
	KeysetData    sql.NullString `json:"keyset_data"`
	EncryptionKey sql.NullString `json:"encryption_key"`
	UserProfileID uuid.UUID      `json:"user_profile_id"`
}

type Branch struct {
	ID             uuid.UUID `json:"id"`
	UniqueName     string    `json:"unique_name"`
	BranchName     string    `json:"branch_name"`
	OrganizationID uuid.UUID `json:"organization_id"`
}

type Configuration struct {
	ID              int32  `json:"id"`
	LatestMigration string `json:"latest_migration"`
}

type Organization struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

type Partner struct {
	PartnerID      uuid.UUID      `json:"partner_id"`
	UniqueName     string         `json:"unique_name"`
	PartnerName    string         `json:"partner_name"`
	ContactNumber  sql.NullString `json:"contact_number"`
	PanNumber      sql.NullInt32  `json:"pan_number"`
	Address        sql.NullString `json:"address"`
	Email          sql.NullString `json:"email"`
	BranchUuid     uuid.UUID      `json:"branch_uuid"`
	OrganizationID uuid.UUID      `json:"organization_id"`
}

type PartnerPaymentReceipt struct {
	PrID           uuid.UUID       `json:"pr_id"`
	PartnerID      uuid.UUID       `json:"partner_id"`
	RecordType     sql.NullString  `json:"record_type"`
	Amount         decimal.Decimal `json:"amount"`
	BranchUuid     uuid.UUID       `json:"branch_uuid"`
	UserProfileID  uuid.UUID       `json:"user_profile_id"`
	Comments       sql.NullString  `json:"comments"`
	OrganizationID uuid.UUID       `json:"organization_id"`
}

type Product struct {
	ProductID         uuid.UUID       `json:"product_id"`
	ProductName       string          `json:"product_name"`
	UniqueName        string          `json:"unique_name"`
	ProductImage      sql.NullString  `json:"product_image"`
	Description       sql.NullString  `json:"description"`
	SellingPrice      decimal.Decimal `json:"selling_price"`
	RemainingQuantity decimal.Decimal `json:"remaining_quantity"`
	BranchUuid        uuid.UUID       `json:"branch_uuid"`
	MeasurementUnit   string          `json:"measurement_unit"`
	OrganizationID    uuid.UUID       `json:"organization_id"`
}

type Purchase struct {
	PurchaseID        uuid.UUID       `json:"purchase_id"`
	PurchaseGroupID   uuid.NullUUID   `json:"purchase_group_id"`
	ProductID         uuid.NullUUID   `json:"product_id"`
	ProductName       string          `json:"product_name"`
	UnitPurchasePrice decimal.Decimal `json:"unit_purchase_price"`
	Units             decimal.Decimal `json:"units"`
	BranchUuid        uuid.UUID       `json:"branch_uuid"`
	OrganizationID    uuid.UUID       `json:"organization_id"`
}

type PurchaseGroup struct {
	PurchaseGroupID uuid.UUID       `json:"purchase_group_id"`
	Supplier        sql.NullString  `json:"supplier"`
	TotalCost       decimal.Decimal `json:"total_cost"`
	PurchaseDate    time.Time       `json:"purchase_date"`
	PaymentMethod   sql.NullString  `json:"payment_method"`
	BranchUuid      uuid.UUID       `json:"branch_uuid"`
	UserProfileID   uuid.UUID       `json:"user_profile_id"`
	Comments        sql.NullString  `json:"comments"`
	PartnerID       uuid.NullUUID   `json:"partner_id"`
	OrganizationID  uuid.UUID       `json:"organization_id"`
}

type Sale struct {
	SalesID          uuid.UUID       `json:"sales_id"`
	SalesGroupID     uuid.NullUUID   `json:"sales_group_id"`
	ProductID        uuid.UUID       `json:"product_id"`
	Quantity         decimal.Decimal `json:"quantity"`
	CurrentCostPrice decimal.Decimal `json:"current_cost_price"`
	SalesPrice       decimal.Decimal `json:"sales_price"`
	Total            decimal.Decimal `json:"total"`
	Profit           decimal.Decimal `json:"profit"`
}

type SalesGroup struct {
	SalesGroupID   uuid.UUID       `json:"sales_group_id"`
	TotalAmount    decimal.Decimal `json:"total_amount"`
	TotalProfit    decimal.Decimal `json:"total_profit"`
	PaymentMethod  sql.NullString  `json:"payment_method"`
	SoldDate       time.Time       `json:"sold_date"`
	BranchUuid     uuid.UUID       `json:"branch_uuid"`
	UserProfileID  uuid.UUID       `json:"user_profile_id"`
	OrganizationID uuid.UUID       `json:"organization_id"`
	CustomerName   sql.NullString  `json:"customer_name"`
	Comments       sql.NullString  `json:"comments"`
}

type UserOrganizationBranch struct {
	ID             uuid.UUID   `json:"id"`
	UserProfileID  uuid.UUID   `json:"user_profile_id"`
	OrganizationID uuid.UUID   `json:"organization_id"`
	BranchUuids    []uuid.UUID `json:"branch_uuids"`
}

type UserProfile struct {
	ID       uuid.UUID      `json:"id"`
	FullName string         `json:"full_name"`
	Address  sql.NullString `json:"address"`
	UserRole sql.NullString `json:"user_role"`
}
