// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: organization.sql

package generated

import (
	"context"

	"github.com/google/uuid"
)

const createOrganization = `-- name: CreateOrganization :one

INSERT INTO organization (name)
VALUES ($1)
RETURNING id, name
`

// Organization CRUD Operations
func (q *Queries) CreateOrganization(ctx context.Context, name string) (Organization, error) {
	row := q.db.QueryRowContext(ctx, createOrganization, name)
	var i Organization
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createOrganizationWithUser = `-- name: CreateOrganizationWithUser :one
WITH new_org AS (
    INSERT INTO organization (name)
    VALUES ($1)
    RETURNING id, name
),
user_org_link AS (
    INSERT INTO user_organization_branches (organization_id, user_profile_id)
    SELECT new_org.id, $2
    FROM new_org
    RETURNING organization_id, user_profile_id
)
SELECT new_org.id, new_org.name
FROM new_org
`

type CreateOrganizationWithUserParams struct {
	Name          string    `json:"name"`
	UserProfileID uuid.UUID `json:"user_profile_id"`
}

type CreateOrganizationWithUserRow struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) CreateOrganizationWithUser(ctx context.Context, arg CreateOrganizationWithUserParams) (CreateOrganizationWithUserRow, error) {
	row := q.db.QueryRowContext(ctx, createOrganizationWithUser, arg.Name, arg.UserProfileID)
	var i CreateOrganizationWithUserRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteOrganization = `-- name: DeleteOrganization :exec
DELETE FROM organization
WHERE id = $1
`

func (q *Queries) DeleteOrganization(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOrganization, id)
	return err
}

const organizationExists = `-- name: OrganizationExists :one
SELECT EXISTS(
    SELECT 1 FROM organization WHERE id = $1
)
`

func (q *Queries) OrganizationExists(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, organizationExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const organizationNameExists = `-- name: OrganizationNameExists :one
SELECT EXISTS(
    SELECT 1 FROM organization WHERE name = $1
)
`

func (q *Queries) OrganizationNameExists(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRowContext(ctx, organizationNameExists, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateOrganization = `-- name: UpdateOrganization :one
UPDATE organization
SET name = $2
WHERE id = $1
RETURNING id, name
`

type UpdateOrganizationParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (Organization, error) {
	row := q.db.QueryRowContext(ctx, updateOrganization, arg.ID, arg.Name)
	var i Organization
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
